@page "/agregartienda"
@page "/editartienda/{Id}"
@using BlazorApp1.DTOs
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3>UnaTienda: @Id</h3> 

@if (unaTienda!=null)
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="unaTienda" OnValidSubmit="UpdateTienda">
                <div class="form-group">
                    <input type="hidden" @bind="@unaTienda.Id" />

                    <label for="Nombre" class="control-label">Nombre</label>
                    <input for="Nombre" class="form-control" @bind="unaTienda.Nombre" />

                    <label for="DireccionCalle" class="control-label">Calle</label>
                    <input for="DireccionCalle" class="form-control" @bind="unaTienda.Direccion.Calle" />
                    
                    <label for="DireccionNumero" class="control-label">Numero</label>
                    <input for="DireccionNumero" class="form-control" @bind="unaTienda.Direccion.Numero" />
                    
                    <label for="DireccionLocalidad" class="control-label">Localidad</label>
                    <input for="DireccionLocalidad" class="form-control" @bind="unaTienda.Direccion.Localidad" />

                    <label for="DireccionCodigoPostal" class="control-label">Código postal</label>
                    <input for="DireccionCodigoPostal" class="form-control" @bind="unaTienda.Direccion.CodigoPostal" />

                    <label for="DireccionProvincia" class="control-label">Provincia</label>
                    <input for="DireccionProvincia" class="form-control" @bind="unaTienda.Direccion.Provincia" />

                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Grabar</button>
                    <button type="button" class="btn btn-danger" @onclick="() => Cancel()">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Precio</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var unItem in unaTienda.Stock)
            {
                <tr>
                    <td>@unItem.producto.Id</td>
                    <td>@unItem.producto.Nombre</td>
                    <td>@unItem.producto.Precio</td>
                    <td>@unItem.cantidad</td>
                </tr>
            }
        </tbody>
    </table>
} else
{
    <p>Cargando...</p>
}




@code {
    [Parameter]
    public string Id { get; set; }

    private Tienda? unaTienda;
    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty(Id)){
            unaTienda = new Tienda();
            unaTienda.Direccion = new Direccion();
            unaTienda.Stock = new List<StockItem>();
        } else
            unaTienda = await Http.GetFromJsonAsync<Tienda>("https://localhost:7159/Tienda/" + Id);
    }

    protected async Task UpdateTienda()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(unaTienda);
        var jsonString = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        if(unaTienda.Id == 0 )
            await Http.PostAsync("https://localhost:7159/Tienda", jsonString);
        else 
            await Http.PutAsync("https://localhost:7159/Tienda/", jsonString);
        Cancel();
    }

    void Cancel()
    {
        navigationManager.NavigateTo("/tiendas");
    }
}
